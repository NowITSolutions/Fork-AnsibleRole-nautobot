#########################
#                       #
#    LDAP Settings      #
#                       #
#########################

AUTHENTICATION_BACKENDS = [
    'django_auth_ldap.backend.LDAPBackend',
    'nautobot.core.authentication.ObjectPermissionBackend',
]

import ldap

from django_auth_ldap.config import LDAPSearch, LDAPGroupQuery, NestedActiveDirectoryGroupType

REMOTE_AUTH_ENABLED = False

# Server URI
AUTH_LDAP_SERVER_URI = os.getenv("AUTH_LDAP_SERVER_URI", "")
AUTH_LDAP_BIND_DN = os.getenv("AUTH_LDAP_BIND_DN", "")
AUTH_LDAP_BIND_PASSWORD = os.getenv("AUTH_LDAP_BIND_PASSWORD", "")

# The following may be needed if you are binding to Active Directory.
AUTH_LDAP_CONNECTION_OPTIONS = {
    ldap.OPT_REFERRALS: 0
}

# Set the DN and password for the Nautobot service account.
AUTH_LDAP_GROUP_TYPE = NestedActiveDirectoryGroupType()

# Include this `ldap.set_option` call if you want to ignore certificate errors. This might be needed to accept a self-signed cert.
#ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)


# If a user's DN is producible from their username, we don't need to search.
# Not wanted for a company who keep their users in a variety of subfolders e.g. engineering.users
AUTH_LDAP_USER_DN_TEMPLATE = "uid=%(user)s,ou=users,dc=example,dc=com"

# This search matches users with the sAMAccountName equal to the provided username. This is required if the user's
# username is not in their DN (Active Directory).
AUTH_LDAP_USER_SEARCH = LDAPSearch('DC=corp,DC=test,DC=net,DC=au',
                                   ldap.SCOPE_SUBTREE,
                                   "(sAMAccountName=%(user)s)")

# users permitted to log in must be in one of these AD groups
AUTH_LDAP_REQUIRE_GROUP = (
    LDAPGroupQuery("CN=Nautobot - Read,OU=Nautobot,OU=Security Groups,DC=corp,DC=test,DC=net,DC=au")
    | LDAPGroupQuery("CN=Nautobot - NOC,OU=Nautobot,OU=Security Groups,DC=corp,DC=test,DC=net,DC=au")
    | LDAPGroupQuery("CN=Nautobot - Engineer,OU=Nautobot,OU=Security Groups,DC=corp,DC=test,DC=net,DC=au")
)

# setting user flags by group
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    # as per main config, we might need "is_active" duplicating AUTH_LDAP_REQUIRE_GROUP.
    # try recycling the same union object instead of rebuilding from strings.
    "is_active": AUTH_LDAP_REQUIRE_GROUP,
    "is_staff": "CN=Nautobot - Engineer,OU=Nautobot,OU=Security Groups,DC=corp,DC=test,DC=net,DC=au",
    # "is_superuser": "CN=Nautobot - Super User,OU=Nautobot,OU=Security Groups,DC=corp,DC=test,DC=net,DC=au"  # It's a choice to make superusers by ldap
}

# Mirroring LDAP groups with filter to allowed list
# as per django doc, this is not favored, instead use find_groups
# more: https://stackoverflow.com/questions/52062136/django-auth-ldap-mirror-groups-not-working
# https://django-auth-ldap.readthedocs.io/en/latest/permissions.html
AUTH_LDAP_MIRROR_GROUPS = ["Nautobot - Read","Nautobot - NOC","Nautobot - Engineer"]

# AUTH_LDAP_FIND_GROUP_PERMS = True

#TODO try this
# You can map user attributes to Django attributes as so.
#AUTH_LDAP_USER_ATTR_MAP = {
#    "first_name": "givenName",
#    "last_name": "sn",
#    "email": "mail"
#}

#
AUTH_LDAP_GROUP_SEARCH = LDAPSearch('OU=Nautobot,OU=Security Groups,DC=corp,DC=test,DC=net,DC=au',
                                    ldap.SCOPE_SUBTREE,
                                    '(objectClass=group)')

#LOG_LDAP_TO_CONSOLE = True  # preempts file and should not be left running in prod
#LOG_LDAP_TO_FILE = True  # busted and commented out